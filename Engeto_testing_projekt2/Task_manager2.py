import mysql.connector as mc
import mysql.connector.errors as err
import datetime as dt


###
# Hlavn√≠ ƒç√°st k√≥du ‚¨áÔ∏èüößüí≠
# 1. vlo≈æen√≠ kodu z TM1 ‚úÖ
# 2. √∫prava kodu z TM1 - o≈°et≈ôen√≠ chyb zji≈°tƒõn√Ωch v testu ‚úÖ
# 3. implementace p≈ôipojen√≠ datab√°ze k programu ‚úÖ - o≈°et≈ôen√≠ tvorbou class Databaze
# 4. implementace nov√© metody pro aktualizaci ukol≈Ø ‚úÖ - def aktualizovat_ukoly()
# 5. refaktoring pro zaji≈°tƒõn√≠ metody DRY -- opakuje se: ‚úÖ
#       - ovƒõ≈ôen√≠ id
#       - o≈°et≈ôen√≠ chyb
#       - ovƒõ≈ôen√≠ dat v db
#       N√°vrh -> vytvo≈ôen√≠ nov√© class Pomocn√≠k
# ###


class Databaze:
    def __init__(self, host="localhost", user="root", password="alatriste", database="sys"):
        self.host = host
        self.user = user
        self.password = password
        self.database = database
        self.conn = None
        self.cursor = None

    def pripojeni_db(self):

        # nastaven√≠ p≈ôipojen√≠ k datab√°zi ‚ö†Ô∏è
        try:
            self.conn = mc.connect(
                host="localhost",
                user="root",
                password="alatriste",
                database="sys"
            )
            # If conn Ok, vytvo≈ô√≠ se kurzor pro prov√°dƒõn√≠ SQL p≈ô√≠kaz≈Ø Ô∏è
            self.cursor = self.conn.cursor()
            print('p≈ôipojen√≠ k datab√°zi se zda≈ôilo')
        except err:
            Pomocnik.chybova_hlaska()


    def vytvoreni_tabulky(self):
        # Tvorba tabulky v databazi, pokud neexistuje
        try:
            self.cursor.execute('''
            create table IF NOT EXISTS ukoly(
        	id int primary key auto_increment,
        	nazev varchar(50),
            popis varchar(100),
            stav varchar(25),
            datum_vytvoreni DATE
        );  
            '''
                           )
        except err:
            Pomocnik.chybova_hlaska()


class Menu:
    def zobrazit(self):
        print("Spr√°vce √∫kol≈Ø - Hlavn√≠ menu \n 1. P≈ôidat nov√Ω √∫kol \n 2. Zobrazit √∫koly \n 3. Aktualizovat √∫kol \n 4. Odstranit √∫kol \n 5. Konec Programu ")


class Pomocnik:
    @staticmethod
    def chybova_hlaska():
        """Zobraz√≠ chybovou hl√°≈°ku"""
        print(f"Nastala neoƒçek√°van√° chyba: \n {err}")

    @staticmethod
    def overeni_id(db):
        """Ovƒõ≈ô√≠, zda existuje zadan√© ID v datab√°zi."""
        try:
            ukol_cislo = int(input("\n Vyberte id √∫kolu, kter√Ω chcete aktualizovat/odstranit: "))
            db.cursor.execute("SELECT id from ukoly where id = %s", (ukol_cislo,))
            id_check = db.cursor.fetchone()
            return ukol_cislo, id_check
        except err:
            Pomocnik.chybova_hlaska()

    @staticmethod
    def overeni_dat(db, query):
        """Ovƒõ≈ô√≠, zda existuj√≠ √∫koly v db."""
        try:
            db.cursor.execute(query)
            prvni_zaznam = db.cursor.fetchone()[0]
            if prvni_zaznam is None:
                print("Seznam √∫kol≈Ø je pr√°zdn√Ω.")
            else:
                print("Seznam √∫kol≈Ø:")
                vsechny_zaznamy = db.cursor.fetchall()
                for row in vsechny_zaznamy:
                    print(row)
        except err:
            Pomocnik.chybova_hlaska()


class Ukoly:
    def pridat_ukol(self):
        ukol_nazev = input("Zadejte n√°zev √∫kolu: ")
        ukol_popis = input("Zadejte popis √∫kolu:")
        datum = dt.datetime.now()
        if ukol_nazev and ukol_popis != "":
           try:
                db.cursor.execute("Insert into ukoly (nazev, popis, stav, datum_vytvoreni) VALUES(%s, %s, %s, %s)", (ukol_nazev, ukol_popis,"Nezah√°jeno",datum))
                db.conn.commit()
                print(f"√ökol '{ukol_nazev}' byl p≈ôid√°n.")
           except err:
               Pomocnik.chybova_hlaska()

        else:
            print('n√°zev a popis nesm√≠ b√Ωt pr√°zdn√Ω text. Opakuj volbu!')

    def zobrazit_ukoly(self):
        query = "SELECT id, nazev, popis, stav FROM ukoly WHERE stav IN ('Prob√≠h√°', 'nezah√°jeno')"
        Pomocnik.overeni_dat(db, query)

    def aktualizovat_ukoly(self):
        ###
        # Zmƒõna stavu √∫kolu
        # - U≈æivatel vid√≠ seznam √∫kol≈Ø (ID, n√°zev, stav).
        # - Vybere √∫kol podle ID.
        # - Dostane na v√Ωbƒõr nov√Ω stav: "Prob√≠h√°" nebo "Hotovo"
        # - Po potvrzen√≠ se aktualizuje DB.
        # - Pokud zad√° neexistuj√≠c√≠ ID, program ho upozorn√≠ a nech√° ho vybrat znovu.
        #
        # ###

        query = "SELECT ID, nazev, stav FROM ukoly"
        Pomocnik.overeni_dat(db, query)
        try:
            ukol_cislo, id_check = Pomocnik.overeni_id(db)
            if not id_check:
                print('Zadejte platn√© ID!')
            else:
                volba_stav = int(input('zadejte ƒç√≠slo stavu √∫kolu: \n ƒç.1 - Prob√≠h√° \n ƒç.2 - Hotovo '))
                if volba_stav == 1:
                    novy_stav = "Prob√≠h√°"
                elif volba_stav == 2:
                    novy_stav = "Hotovo"
                else:
                    print("Neplatn√° volba, opakujte zad√°n√≠!")
        except ValueError:
            print('Zadejte ƒç√≠selnou hodnotu!')
        except err:
            Pomocnik.chybova_hlaska()

        db.cursor.execute("UPDATE ukoly set stav = %s where id = %s", (novy_stav, ukol_cislo))
        db.conn.commit()
        print("Stav √∫kolu byl √∫spƒõ≈°nƒõ zmƒõnƒõn")


    def odstranit_ukol(self):
        query = "SELECT * FROM ukoly"
        Pomocnik.overeni_dat(db, query)

        ukol_cislo, id_check = Pomocnik.overeni_id(db)
        if not id_check:
            print('Zadejte platn√© ID')
        else:
            db.cursor.execute("DELETE FROM ukoly WHERE id = %s", (ukol_cislo,))
            db.conn.commit()
            print(f"Z√°znam s ID {ukol_cislo} byl √∫spƒõ≈°nƒõ odstranƒõn.")

# Vytvo≈ôen√≠ instanc√≠ mimo smyƒçku

menu = Menu()
ukoly_instance = Ukoly()

# p≈ôipojen√≠ k datab√°zi
db = Databaze()
db.pripojeni_db()

# Hlavn√≠ smyƒçka programu
while True:

    menu.zobrazit()
    try:
        volba = int(input("Vyberte mo≈ænost (1-5): "))

        if volba == 1:
            ukoly_instance.pridat_ukol()
        elif volba == 2:
            ukoly_instance.zobrazit_ukoly()
        elif volba == 3:
            ukoly_instance.aktualizovat_ukoly()
        elif volba == 4:
            ukoly_instance.odstranit_ukol()
        elif volba == 5:
            print("Program byl ukonƒçen.")
            break
        else:
            print("Neplatn√° volba. Zkuste to znovu.")
    except ValueError:
        print('Neplatn√° volba, zkuste zadat znovu!')


# uzav≈ôen√≠ kurzoru a ukonƒçen√≠ p≈ôipojen√≠ k datab√°z√≠ ‚õî
db.cursor.close()
db.conn.close()
